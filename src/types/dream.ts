import { DreamInterpretation, ApiResponse, DreamAnalysisRequest } from '../types/dream';

export class DreamInterpreterAPI {
  constructor(public apiKey: string, public apiEndpoint: string) {}

  async interpretDream(request: DreamAnalysisRequest): Promise<ApiResponse> {
    const { dreamDescription } = request;

    try {
      const response = await fetch(this.apiEndpoint, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ inputs: dreamDescription })
      });

      if (!response.ok) {
        const errorText = await response.text();
        return { success: false, error: `API Error: ${errorText}` };
      }

      const result = await response.json();

      // ðŸ‘‡ Adapt this parsing depending on your model's response format
      const generatedText = result.generated_text || result[0]?.generated_text;

      if (!generatedText) {
        return { success: false, error: 'No interpretation generated by the model.' };
      }

      // âœ… For now, we'll pack the whole generated text into 'interpretation' field, the rest can be refined
      const interpretation: DreamInterpretation = {
        symbols: [],
        emotions: [],
        themes: [],
        interpretation: generatedText,
        takeaway: 'Reflect on how this resonates with your current life situation.'
      };

      return { success: true, data: interpretation };

    } catch (error: any) {
      console.error('API call failed:', error);
      return { success: false, error: error.message || 'Unknown error occurred.' };
    }
  }
}
